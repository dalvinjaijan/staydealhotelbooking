"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const hostRepository_1 = require("../../../repositories/hostRepository");
const hostInteractor_1 = require("../../../Interactors/hostInteractor");
const hostController_1 = require("../../controllers/host/hostController");
const multer_1 = __importDefault(require("../../../Utils/multer"));
const chatRepository_1 = __importDefault(require("../../../repositories/chatRepository"));
const chatInteractor_1 = __importDefault(require("../../../Interactors/chatInteractor"));
const verifyToken_1 = require("../../middlewares/verifyToken");
const hostRouter = express_1.default.Router();
const chatrepo = new chatRepository_1.default();
const chatinteractor = new chatInteractor_1.default(chatrepo);
const repository = new hostRepository_1.hostRepository();
const interactor = new hostInteractor_1.hostInteractor(repository);
const controller = new hostController_1.hostController(interactor, chatinteractor);
hostRouter.post('/register', controller.registerHost.bind(controller));
hostRouter.post('/verifyOtp', controller.verifyOtp.bind(controller));
hostRouter.post('/login', controller.login.bind(controller));
hostRouter.post('/logout', controller.logout.bind(controller));
hostRouter.post('/addHotel', (0, verifyToken_1.verifyAccessToken)('host'), (0, verifyToken_1.verifyRole)(['host']), multer_1.default.any(), controller.addHotel.bind(controller));
hostRouter.get('/hotels', (0, verifyToken_1.verifyAccessToken)('host'), (0, verifyToken_1.verifyRole)(['host']), controller.fetchHotels.bind(controller));
hostRouter.post('/editHotelDetails', (0, verifyToken_1.verifyAccessToken)('host'), (0, verifyToken_1.verifyRole)(['host']), controller.editHotelDetails.bind(controller));
hostRouter.get('/hostProfile', (0, verifyToken_1.verifyAccessToken)('host'), (0, verifyToken_1.verifyRole)(['host']), controller.hostProfile.bind(controller));
hostRouter.get('/wallet-transactions', (0, verifyToken_1.verifyAccessToken)('host'), (0, verifyToken_1.verifyRole)(['host']), controller.viewWalletTransactions.bind(controller));
hostRouter.get('/fetchReport', (0, verifyToken_1.verifyAccessToken)('host'), (0, verifyToken_1.verifyRole)(['host']), controller.fetchReport.bind(controller));
hostRouter.get('/piechartReport', (0, verifyToken_1.verifyAccessToken)('host'), (0, verifyToken_1.verifyRole)(['host']), controller.fetchPieReport.bind(controller));
hostRouter.get('/reservations', (0, verifyToken_1.verifyAccessToken)('host'), (0, verifyToken_1.verifyRole)(['host']), controller.fetchReservations.bind(controller));
hostRouter.get("/getchatid/:hostId/:userid", controller.getChatId.bind(controller));
hostRouter.get("/getonetonechat/:chatid", controller.getOneToneChat.bind(controller));
hostRouter.get("/notificationCounterUpdater/:id", controller.notificationCountUpdater.bind(controller));
hostRouter.get("/notificationGetter/:id", controller.notificationGetter.bind(controller));
exports.default = hostRouter;
